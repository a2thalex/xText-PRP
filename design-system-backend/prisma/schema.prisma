// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  teamMembers      TeamMember[]
  designSystems    DesignSystem[]
  components       Component[]
  comments         Comment[]
  reactions        Reaction[]
  presence         UserPresence[]
  activities       ActivityLog[]
  componentVersions ComponentVersion[]

  @@map("users")
}

model Team {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  members       TeamMember[]
  designSystems DesignSystem[]
  activities    ActivityLog[]

  @@map("teams")
}

model TeamMember {
  teamId   String   @map("team_id")
  userId   String   @map("user_id")
  role     String   // admin, editor, viewer
  joinedAt DateTime @default(now()) @map("joined_at")

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([teamId, userId])
  @@map("team_members")
}

// Design System
model DesignSystem {
  id        String   @id @default(uuid())
  teamId    String   @map("team_id")
  name      String
  version   String
  published Boolean  @default(false)
  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  team       Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  creator    User         @relation(fields: [createdBy], references: [id])
  components Component[]
  tokens     DesignToken[]
  presence   UserPresence[]

  @@map("design_systems")
}

model Component {
  id             String   @id @default(uuid())
  designSystemId String   @map("design_system_id")
  name           String
  category       String
  props          Json
  code           String   @db.Text
  documentation  String?  @db.Text
  version        Int      @default(1)
  createdBy      String   @map("created_by")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  designSystem DesignSystem      @relation(fields: [designSystemId], references: [id], onDelete: Cascade)
  creator      User              @relation(fields: [createdBy], references: [id])
  versions     ComponentVersion[]

  @@map("components")
}

model ComponentVersion {
  id            String   @id @default(uuid())
  componentId   String   @map("component_id")
  version       Int
  props         Json
  code          String   @db.Text
  documentation String?  @db.Text
  changedBy     String   @map("changed_by")
  changeMessage String?  @map("change_message") @db.Text
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  component Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
  author    User      @relation(fields: [changedBy], references: [id])

  @@unique([componentId, version])
  @@map("component_versions")
}

model DesignToken {
  id             String   @id @default(uuid())
  designSystemId String   @map("design_system_id")
  category       String   // colors, typography, spacing, etc.
  name           String
  value          Json
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  designSystem DesignSystem @relation(fields: [designSystemId], references: [id], onDelete: Cascade)

  @@unique([designSystemId, category, name])
  @@map("design_tokens")
}

// Collaboration
model Comment {
  id           String   @id @default(uuid())
  resourceType String   @map("resource_type") // component, token, etc.
  resourceId   String   @map("resource_id")
  parentId     String?  @map("parent_id")
  userId       String   @map("user_id")
  content      String   @db.Text
  resolved     Boolean  @default(false)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]  @relation("CommentReplies")
  reactions Reaction[]

  @@map("comments")
}

model Reaction {
  id        String   @id @default(uuid())
  commentId String   @map("comment_id")
  userId    String   @map("user_id")
  emoji     String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, emoji])
  @@map("reactions")
}

// Presence and Activity
model UserPresence {
  userId         String   @map("user_id")
  designSystemId String   @map("design_system_id")
  status         String   // active, idle, away
  lastSeen       DateTime @default(now()) @map("last_seen")
  cursorPosition Json?    @map("cursor_position")

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  designSystem DesignSystem @relation(fields: [designSystemId], references: [id], onDelete: Cascade)

  @@id([userId, designSystemId])
  @@map("user_presence")
}

model ActivityLog {
  id           String   @id @default(uuid())
  teamId       String   @map("team_id")
  userId       String   @map("user_id")
  action       String
  resourceType String?  @map("resource_type")
  resourceId   String?  @map("resource_id")
  metadata     Json?
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_log")
}